###############################
# This is a linux cheat sheet # 
###############################

####### Linux Cheat Sheet #######



### File Commands and Basics ###
ls					# directory listing
	ls -al				# formatted listing with hidden files
	ls -ltra			# sorts by last updated with hidden files
	ls -Sharl			# sorts by file size with hidden files
	ls -m				# shows files and directories comma separated
	ls --full-time			# formatted listing with year
	ls -R				# list files and subdirectories recursively
cd DIR					# change directory to DIR
	cd				# change to home directory
	cd -				# returns you to the previous directory 
pwd					# show current directory 
mkdir DIR				# create a directory DIR
	mkdir -p ./PARENTDIR/CHILDDIR/	# creates PARENTDIR as well as CHILDDIR
rmdir					# remove an empty directory
rm FILE					# delete FILE
	rm -r DIR			# delete directory DIR
	rm -f FILE			# force remove FILE
	rm -rf DIR			# force remove directory DIR
	rm -i FILE			# asks before FILE is deleted 
	rm -- -rf			# remove files that start with "-", (or rm ./-rf) 
	find . -inum INODE -exec rm -i {} \;	# removes an INODE, useful for files like "la*
cp FILE1 FILE2				# copy FILE1 to FILE2
	cp -r DIR1 DIR2			# copy DIR1 to DIR2; create DIR2 if it doesn't exist
	cp -a DIR1 DIR2			# copies entire directory tree
	cp -u DIR1 DIR2			# prevents overwriting identically-named newer files
mv FILE1 FILE2  			# rename or move FILE1 to FILE2
ln -s TARGET LINK_NAME			# create symbolic link, LINK_NAME, link to TARGET
	ln TARGET LINK_NAME		# hard link, points to inode instead of filename
touch FILE				# create or update FILE 
	touch -d "00:00" FILE		# change the modified time of FILE to midnight 
stat FILE				# display file or file system status
	stat -c %Y FILE | gawk '{print strftime("%c", $0)}'	# output of this will show when the FILE was last modified (modified time can be changed) 
	stat -c %Z FILE | gawk '{print strftime("%c", $0)}'	# output of this will show when the FILE was last changed 
head FILE				# output the first 10 lines of FILE
	head -n 3 FILE			# output the first 3 lines of FILE
tail FILE				# output the last 10 lines of FILE
	tail -f FILE			# output the contents of FILE as it grows, starting with the last 10 lines
	tail -n 3 FILE			# output the last 3 lines of FILE
wc FILE					# print newline, word, and byte counts for a FILE 
	echo -n STRING | wc -m		# counts the characters in a STRING
	cat FILE | wc -l		# counts the lines in FILE 
xargs					# build and execute command lines from standard input
	find . -name "*.c" | xargs rm -rf	# remove all files ending in .c
	find . -name '*.c' | xargs grep 'stdlib.h'	# find files whose name ends in .c and stdlib.h is in the file
cat FILE				# prints a FILE to standard out
	cat FILE1 FILE2 > FILE3		# concatenates FILE1 and FILE2 into FILE3 .
	cat > FILE			# places standard input into FILE
tac FILE				# prints a FILE to standard out in reverse order
rev FILE				# prints the characters of a FILE in a line in reverse order
echo STRING				# prints STRING to standard out
more FILE				# primitive version of less, use less
less FILE				# scrolls through a FILE
	less -N FILE			# opena FILE in less with line numbers 
man COMMAND				# view the linux manual for the specified COMMAND 
	man man				# useful for looking at manual sections ( e.g. ls(1) )
	man 1 ls			# view the man page, section 1, of ls 
info COMMAND				# some more info on COMMAND
ls | tee FILE 				# read from standard input and write to standard output and FILE
	ls | tee -a FILE		# read from standard input and write to standard output and append to FILe
file FILE				# displays the file type of FILE
awk					# pattern scanning and processing language
	ls -l | awk '{print $3}'	# awk will print the 3rd value of ls -l 
	echo 'a:b' | awk -F ':' '{print $1}'	# using ':' as a delimeter print the first value. 
sed					# sed is a stream editor for filtering and trasforming text
	echo 'day day' | sed s:day:night:	# this example will print 'night day' to the console. 
	echo 'day day' | sed -e 's:day:night:g'	# this example will print 'night night' to the console. 'g' meaning global substitution 
cut					# remove sections from each line of files 
	cut -c2 FILE			# prints the 2nd character on each line of FILE 
	cut -c1-3 FILE			# prints characters 1-3 on each line of FILE 
	cut -c3- FILE			# prints the 3rd character to the last character on each line of FILE 
	cut -c-8 FILE			# prints the first 8 characters on each line of FILE 
	cut -d ':' -f1 /etc/passwd	# prints field 1 using delimeter ':' on each line of /etc/passwd 
tr					# translate or delete characters
	ls -m | tr -d '\n'		# removes new line characters from ls -m 
	echo 'linux' | tr "[:lower:]" "[:upper:]"	# prints 'LINUX' 
	tr -cd "[:print:]" < FILE	# removes all non-printable characters from FILE 
sort					# sort lines of text files
	sort FILE			# sorts each line of FILE in alphabetical order 
	sort -u FILE			# sorts each line of FILE in alphabetical order removing duplicates 
	sort -n FILE			# sorts each line of FILE numerically 
uniq					# report or omit repeated lines
	uniq -c				# prefix lines by the number of occurrences 
	uniq -d				# only print duplicate lines 
	uniq -i				# ignore differences in case when comparing 
	uniq -u				# only print unique lines 
seq					# print a sequence of numbers 
	seq 1 7				# prints a sequence of numbers, useful for iterations 
clear					# clears output of the terminal 
apropos COMMAND				# search the manual page names and descriptions using the keyword COMMAND
yes					# Fun for stress testing your machine. Also used like yes | yum update 
time COMMAND				# measures the amount of time a COMMAND takes 
watch COMMAND				# executes COMMAND periodically showing output fullscreen 
	watch -n 1 COMMAND		# changes the update interval to 1 second 
echo hi | wall				# the wall command broadcasts a message to all users on a system 



### System Info ###
date					# show the current date and time
	date --set='19 september 2015 12:00'	# 
hwclock	-r				# read the hardware clock and print the time on standard output 
	hwclock -s			# set the system time from the hardware clock
	hwclock -w			# set the hardware clock from the system time 
cal					# show this month's calendar
	cal 07 1969			# shows the calendar for teh month of July 1969 
	cal -3				# shows the previous, current, and prior month 
uptime					# time, uptime, # of users logged on, and system load averages for the past 1, 5, and 15 minutes 
	uptime --pretty			# shows the uptime 
w					# display who is logged in and what they are doing 
who					# shows who is logged on 
whoami					# who you are logged in as 
last					# 
lastb					# 
history					# 
finger user				# display information about user
uname -a 				# show kernel information
cat /proc/cpuinfo			# cpu informatio
	cat /proc/meminfo  		# memory information
	cat /proc/version  		# version information
cat /etc/*-release  			# distribution and version	
lsbecho hi | wall_release -a				# distribution and version
cat /etc/issue				# distribution and version
free					# show memory and swap usage
whereis app				# show possible locations of app
which app				# show which app will be run by default
ls -l /usr/share/xsessions		# show desktop environments
hostname				# prints the hostname of the system 



### Administrative Commands ###
sudo COMMAND				# run a COMMAND as root 
sudo -u USER COMMAND			# run a COMMAND as USER 
sudo -s					# run the shell specified by the SHELL environment variable
sudo -i					# login specific resource files will be loaded (e.g. .profile, .login) 
sudo !!					# run the previous command as sudo if you forgot to the first time 
su					# logs into new shell as root user 
sudo su					# run su as root user, eliminates the need for a password assuming the current user has sudo privileges
su - USER				# change the user to USER and navigate USER's home directory 
su USER					# change the user to USER and stay in the current directory 
visudo					# edits the sudoers file in a safe fashion 
usermod -aG sudo USER			# adds a USER to the sudo group, eliminates the need to edit the sudoers file 
exit					# exits a shell 
https://prasadlinuxblog.wordpress.com/2012/09/04/392/ # su vs sudo vs runuser 



### SSH ### 
ssh USER@HOST				# connect to HOST as USER
ssh -p PORT USER@HOST			# connect to HOST as USER on port PORT
~/.ssh/					# the current user's ssh directory, important files are, config, authorized_keys, and known_hosts. 
ssh-copy-id USER@HOST			# add your key to HOST for USER to enable a keyed or passwordless login 
ssh -L 9000:localhost:80 HOST		# connects to HOST's localhost port 80 via HOST, view this connection on your localhost port 9000
ssh -L 9000:HOST2:80 HOST1		# connects to HOST2 port 80 via HOST1, view this connection on your localhost port 9000
ssh -D 9999 HOST			# 
ssh -R 9090:HOST2:8000 HOST1		#  
mussh					# multihost SSH 
mussh -H FILE -c 'COMMAND'		# ssh into each host in FILE and execute COMMAND 
cssh					# cluster administration tool 
cssh -c FILE GROUP			# graphically ssh into all hosts in GROUP that reside in the config file FILE 
rssh					# 
Multiplexers				
http://blog.trackets.com/2014/05/17/ssh-tunnel-local-and-remote-port-forwarding-explained-with-examples.html
https://help.ubuntu.com/community/SSH/OpenSSH/PortForwarding



### Remote File Copying ###
scp					# tends to be slower than rsync
rsync					# rsync tends to be faster than scp 
rysnc -havPn /usr/local/ 1.2.3.4:/usr/local/	# dry run, sends recursively, preserves symbolic links, file permissions, user & group ownerships and timestamps
rysnc -havP /usr/local/ 1.2.3.4:/usr/local/	# sends recursively, preserves symbolic links, file permissions, user & group ownerships and timestamps
rysnc -hrvPn /usr/local/ 1.2.3.4:/usr/local/	# dry run, sends recursively, but doesn’t preserve timestamps and permission while transferring data
rysnc -hrvP /usr/local/ 1.2.3.4:/usr/local/	# sends recursively, but doesn’t preserve timestamps and permission while transferring data 
rsync -havP -e "ssh -p6127" /usr/local/ 1.2.3.4:/usr/local/	# the -e option specifies the protocol ssh, useful for specifying the ssh port as well 
ssh-keygen -f "/root/.ssh/known_hosts" -R [1.2.3.4]:6127	# 
rsync -havP -e "ssh -p6127" /usr/local/ 1.2.3.4:/usr/local/	# 
ftp - 					# 
sftp -					# 



### Bash Redirection and Command Line Operators and More ### 
STDIN (0)				# Standard input (data fed into the program)
STDOUT (1)				# Standard output (data printed by the program, defaults to the terminal)
STDERR (2)				# Standard error (for error messages, also defaults to the terminal)
COMMAND > FILE				# write STDOUT of COMMAND to FILE
COMMAND >> FILE				# append STDOUT of COMMAND to FILE
COMMAND 2> FILE				# write STDERR of COMMAND to FILE
COMMAND 2>> FILE			# append STDERR of COMMAND to FILE
COMMAND &> FILE				# write both STDOUT and STDERR of COMMAND to FILE
COMMAND < FILEprint the 				# COMMAND accepting input from FILE 
COMMAND <<WORD HEREDOC DELIMETER	# info bash for more details on this one 
COMMAND <<<STRING			# prints STRING to STDOUT
COMMAND > /dev/null 2>&1		# sends all output to /dev/null
COMMAND &>/dev/null			# sends all output to /dev/null
COMMAND 1>&- 2>&-			# closes STDOUT and STDERR for COMMAND 
COMMAND1 | COMMAND2			# sends STDOUT of COMMAND1 to STDIN of COMMAND2 
COMMAND &				# puts COMMAND in background 
COMMAND ~				# the ~ is simply the current user's home directory 
COMMNAD1;COMMAND2			# runs COMMAND1 then COMMAND2 
COMMAND1 && COMMAND2			# runs COMMAND2 if COMMAND1 succeeds 
COMMAND1 || COMMAND2			# runs COMMAND2 only if COMMAND1 fails 
COMMAND1 && COMMAND2 ||	COMMAND3	# if COMMAND1 then run COMMAND2 else run COMMAND3 
if COMMAND1; then COMMAND2; else COMMAND3; fi	# same logic as above 
!STRING					# run the last command that starts with STRING 
VARIABLE='STRING'			# sets a shell variable 
Alt+.					# brings up the last parameters used 
!!					# runs the last command 
COMMAND1 `COMMAND2`			# backticks will execute COMMAND2 first and use that output as part of COMMAND1 
for i in `COMMAND1`; do echo $i; done	# iterates through output of COMMAND1 and, in this case, echos $i 
printenv, env				# print runtime variables 
set					# print shell variables 
strings /usr/bin/who			# prints the strings of printable characters in a file 	
	
	
### Shell Variables ###
$?					# returns the exit status of the last program that ran 
$!					# pid of last forked process 
	true; echo $?			# will print 0 to STDOUT
	false; echo $?			# will print 1 to STDOUT
$0, $1, $2, $3...			# positional parameters
${10} ... ${N}				# positional parameters beyond 9
$* - $1 $2 $3 ... ${N}			# 
$@ - $1 $2 $3 ... ${N}			# 
"$*" - "$1c$2c$3c...c${N}"		# 
"$@" - "$1" "$2" "$3" ... "${N}"	# 
$#					# total number of parameters
http://stackoverflow.com/questions/5163144/what-are-the-special-dollar-sign-shell-variables



### User and Group Management ###
sudo useradd USERNAME			# 
/etc/passwd				# 
account:password:UID:GID:GECOS:directory:shell	#
/etc/shadow				# 
/etc/group				#
/etc/gshadow				# 
/etc/sudoers				# 
useradd -G GROUPNAME USERNAME		# 
useradd -m -g INITIALGROUP -G ADDITIONALGROUPS -s LOGINSHELL USERNAME	# 
usermod					# 
passwd, passwd USER			# 
chfn					# 
chage					# 
userdel -r				# 
groups USERNAME				# 
id USERNAME				# 
groupadd GROUP				# 
gpasswd -a USER GROUP			# 
groupdel GROUP				# 
groupmod -n NEWGROUP OLDGROUP		# 
gpasswd -d USER GROUP			# 
SUID					# 
SGIG					# 
Sticky Bits				# 
UMASK					# 
http://www.tldp.org/LDP/lame/LAME/linux-admin-made-easy/shadow-file-formats.html
vipw
vigr


### Process Management ###
ps					# display your currently active processes
ps auwx					# 
ps axf					# lists processes in a tree view
top					# display all running processes
htop					# 
kill pid				# kill process id pid
killall proc				# kill all processes named proc *
kill -l					# list all signals 
kill -SIGNAL PID			# send a SIGNAL to a process PID, e.g. kill -2 1234 
Control + c				# halts the current command
Control + d				# log out of current session, similar to exit
Control + s, Control + q		# stops output, resumes output
Control + z				# stops the current command, resume with fg in the foreground or bg in the background
bg					# lists stopped or background jobs; resume a stopped job in the background
fg					# brings the most recent job to foreground
COMMAND &				# runs command in the background
fg n					# brings job n to the foreground
kill n					# kills job n
jobs					# lists jobs
update-rc.d -f process remove		# 
update-rc.d apache2 defaults
update-rc.d apache2 defaults 91
http://www.debuntu.org/how-to-managing-services-with-update-rc-d/
ls -C /etc/rc*.d/ | less
sudo chkconfig apache2 off		# 
pgrep					# 
pstree					# 
fuser -vn tcp 443
fuser -n tcp 22


### Permissions ###
chmod octal FILE			# change the permissions of FILE to octal, which can be found separately for user, group, and world.
	chmod 777 FILE			# read, write, execute for all
	chmod 755 FILE			# rwx for owner, rx for group and world
stat -c %U /media/sf_Shared/		# 
stat -c %G /media/sf_Shared/		# 
stat -c %A /media/sf_Shared/		# 
find / -group [group]			# 
find / -user [user]			# 
chown --preserve-root			# it's a good idea to always use --preserve-root for the sake of caution, and try not to use wildcards unless you know what you are doing 
	chown --preserve-root user:group -R /home/user/*	# chowns all files except hidden files
*** Don't do this ***	chown --preserve-root user:group -R /home/user/.*	# DO NOT DO THIS (This command will start chowning .. directories)
	chown --preserve-root user:group -R /home/user/.[^.]* 	# chowns all hidden files
	chown --preserve-root user:group -R /home/user		# chowns all files in user but also chows the directory user



### Searching ###
grep PATTERN DIR			# search for PATTERN in DIR
grep 'A\|B\|C' DIR			# search for A B or C in DIR
grep -r PATTERN DIR			# search recursively for PATTERN in DIR
grep -B 1 PATTERN DIR			# search for PATTERN in DIR and print line as well as one line before 
grep -A 1 PATTERN DIR			# search for PATTERN in DIR and print line as well as one line after
COMMAND | grep PATTERN			# search for PATTERN in the output of COMMAND
locate FILE				# find all instances of FILE
    locate -i FILE      # locate is case sensitive, use the -i option to ignore case 
sudo updatedb				# updates the database that locate uses to search for files.
	updatedb -e FILE		# 
find					# 
find -maxdepth 1 -type f -mtime +60 -exec ls -l {} \;	# 



### Disk Usage ###
df					# show disk usage
	df -i				# show inode usage 
	df -h				# show disk usage in human-readable format 
	df -T				# prints filesystem type
	df -a				# includes dummy systems
	df --total			# prints the total 
find / -xdev -printf '%h\n' | sort | uniq -c | sort -k 1 -n	# 
du					# show directory space usage
	du -sch *			# shows largest visible files and directories not sorted 
	du -sch .[!.]* * |sort -h	# one of my favorites, shows the largest files and directories including those that are hidden 
fdisk					# 
lsblk



### Shells ###
sh					# typically a soft link to another shell 
bash					# 
dash					# 
csh					# 
tcsh					# 



### File Comparison ###
diff -u file1 file2 > file3		# 
md5sum file				# useful for comparing two files, not secure for scripting use sha for more security  
sha1sum					#
comm					# 



### IP Addresses ###
ifconfig				#   
ip addr					# 
ip addr show				# 
curl ifconfig.me			# 
http://vlsm-calc.net/ipclasses.php IP Address Classes (Replaced by http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing >CIDR)
http://en.wikipedia.org/wiki/Reserved_IP_addresses	# Reserved IP Addresses
http://www.subnet-calculator.com/subnet.php IP Subnet Calculator
http://www.subnet-calculator.com/cidr.php CIDR Calculator
http://www.iplocation.net/



### Compression ###
tar cf file.tar files			# create a tar named file.tar containing files
tar xf file.tar				# extract the files from file.tar
tar czf file.tar.gz files		# create a tar with Gzip compression
tar xzf file.tar.gz			# extract a tar using Gzip
tar cjf file.tar.bz2			# create a tar with Bzip2 compression
tar xjf file.tar.bz2			# extract a tar using Bzip2
gzip file				# compresses file and renames it to file.gz
gzip -d file.gz				# decompresses file.gz back to file
bunzip2					# 



### Network ###
ping host				# ping host and output results
fping					# 
whois domain				# get whois information for domain
jwhois					# 
dig domain				# 
dig mx domain				# get DNS information for domain
dig -x host				# reverse lookup host
wget file				# download file
wget -c file				# continue a stopped download
host					# useful for forward and reverse dns lookups 
nslookup				# 
nmap					# 
traceroute				# 
netstat -nat | grep LISTEN		# 
lo
eth0
wlan0
tun3
/etc/hosts
/etc/hosts.conf
/etc/resolv.conf
/etc/network/interfaces
/etc/network/options
/etc/inetd.conf
/etc/sysconfig/network-scripts
arp 
nmap
ngrep
tcpdump
tcpdump -lni any port 25
http://www.aboutdebian.com/network.htm 
nmap/zenmap - network trouble shooting tool.
wireshark 
mtr
fuser
netcat
bridging 



### Packaging Commands ###
Install from source: ./configure, make, make install	# probably a better idea to use a package manager when possible so the package will get updated 
## Debian Based ##
apt-get -s upgrade			# lists the packages to be upgraded 
apt-get update				# updates the repos 
apt-get upgrade				# updates the packages
apt-get dist-upgrade			# 
apt-get autoremove			# 
apt-get autoclean			# 
dpkg -i pkg.deb				# install a package 
dpkg -l | grep PACKAGE			# see if a package is installed 
dpkg -s PACKAGE				# see if package is installed and get info 
dpkg-query -L PACKAGE			# view the files that are associated in the bash package
dpkg -S file				# view the package that is associated with the file 
		Remove Old Kernels In /boot 
		df -h			# check the disk usage in /boot 
		uname -r		# check which kernel you are currently using so as not to remove it 
		dpkg -l | grep linux-image	# view all the kernels that are installed 
		dpkg -r linux-image-3.2.0-65-generic	# remove the kernal
		dpkg --purge linux-image-3.2.0-65-generic	# purge 
## Red Hat Based ##
yum check-update			# lists the packages to be upgraded 
yum update				# updates the system 
yum history list PACKAGE		# 
yum history undo ID			# 
rpm -Uvh pkg.rpm			# install a package 
rpm -qa | grep PACKAGE			# see if a package is installed 
rpm -ql PACKAGE				# view the files that are associated in the bash package 
rpm -qf PACKAGE				# view the package that is associated with the file
rpm -qa --last | less			# 
yum remove PACKAGE			# 
rpm -e 					# 
repoquery -i PACKAGE			# 
lsmod					#
modprobe				#
ldd PATH				# ldd may execute the program to find the dependencies 
objdump -p PATH | grep NEEDED		# safer to use objdump 
apt-cache rdepends PACKAGE		# 



### Encryption ###
gpg --gen-key				# 
gpg --list-keys				# 
gpg --list-secret-keys			# 
gpg --keyserver pgp.mit.edu --search-keys user@example.com	# 
https://kb.iu.edu/d/awiu
https://pgp.mit.edu/
https://futureboy.us/pgp.html
https://www.gnupg.org/index.html
https://www.digitalocean.com/community/tutorials/how-to-use-gpg-to-encrypt-and-sign-messages-on-an-ubuntu-12-04-vps
http://www.thegeekstuff.com/2012/10/gnupg-basics/
md5sum
sha1sum
apg 



### Logs ###
/var/log/				# 
/etc/cron.daily/logrotate		# 
/etc/logrotate.conf			# 
/etc/logrotate.d/			# 
logrotate -d /etc/logrotate.d/FILE	# 
logrotate -f /etc/logrotate.d/FILE	# 
zcat					# 
zless					# 
zmore					# 
multitail *.log				# 
logstalgia - graphical log tool.	# 
logstash
logwatch



### Cron/Anacron/At ### 
/etc/crontab				# sytem wide crontab, (min, hour, dom, mon, dow, user, command)
/etc/cron.hourly/			# hourly crontab for scripts
/etc/cron.daily/			# daily crontab for scripts
/etc/cron.weekly/			# weekly crontab for scripts
/etc/cron.monthly/			# monthly crontab for scripts
/etc/cron.d/				# crontab for scripts 
/var/spool/cron/crontabs/		# user crontabs, (min, hour, dom, mon, dow, command), same as crontab -e 
anacron
at, at -l, at -r 
atq
atrm
batch
atd 



### Devices ###
MAJOR and MINOR 
/proc/devices
ls -l /dev
d (directory)
c (character device)
l (symlink)
p (named pipe)
s (socket)
b (block device)
D (door, not common on Linux systems, but has been ported)
http://www.makelinux.net/ldd3/chp-3-sect-2
mknod FILE p
mkfifo FILE 



### iptables / Rate Limiting / Hash Limiting ###
iptables -L -v				# 
iptables -L -vt nat			# 
iptables-save | less			# 
iptables -L --line-numbers		# 
fail2ban - http://www.fail2ban.org/	# 
/var/log/secure				# fail2ban scans this file for multiple login attempts
/etc/fail2ban/				# 
denyhosts				# 
https://en.wikipedia.org/wiki/Iptables 



### Web Servers ###
## Apache ## 
## Debian Based ##
a2query
a2enconf
a2disconf
a2enmod
a2dismod
a2ensite
a2dissite
## Nginx ## 
## Debian Based ##
https://en.wikipedia.org/wiki/Comparison_of_web_server_software



### Web Browsers ###
https://en.wikipedia.org/wiki/Comparison_of_web_browsers
http://html5test.com



### Monitoring ###
## Munin ## 
munin-node-configure --suggest 
munin-node-configure --shell
munin-run PLUGIN
munin-run PLUGIN config
/etc/munin/plugins/
http://munin-monitoring.org/
## Nagios ##
## Opsview ## 
## Wormly ##
## Pingdom ##
https://en.wikipedia.org/wiki/Comparison_of_network_monitoring_systems



### Printing ###
http://serverfault.com/questions/301783/how-can-i-delete-a-printer-from-cups
http://www.togaware.com/linux/survivor/CUPS_Command.html



### Backups ### 
rsync -havPn $FILE root@$HOSTNAME:/$RESTORE-DIR
	ZFS - http://en.wikipedia.org/wiki/ZFS
		zfs create pool/dataset
		zfs create -o OPTION=OPTIONVALUE pool/dataset
		zfs list
		zfs destroy
		zfs umount
		zfs rename
		zfs mount
		zpool status
		zpool history
	    zpool list
    	zfs get all pool/dataset
		Oracle ZFS Docs - http://docs.oracle.com/cd/E18752_01/html/819-5461/zfsover-1.html



### Hardware ###
http://www.supermicro.com/index_home.cfm
http://dcc-online.com/wordpress/?p=322
http://www.newegg.com/



### Mounting/NFS ###
df -t nfs				# list all currently mounted filesystems 
df -a					# 
/etc/fstab				# filesystems to mount at boot 
/etc/mtab				# filesystems currently mounted 
mount					# 
umount					# 
mountall				# 
mountpoint				# 



### Tracing System Calls and Program Debugging ### 
strace PROGRAM				# trace the execution of PROGRAM
strace -e open PROGRAM			# display only the 'open' call when tracing PROGRAM 
strace -e trace=open,read PROGRAM	# display the 'open' call and the 'read' call when tracing PROGRAM 
strace -o OUTPUT PROGRAM		# stores output of strace to OUTPUT when running PROGRAM
sudo strace -p PID			# run strace on a running process 
strace -t -e open PROGRAM		# print timestamp 
strace -r PROGRAM			# print reletive time 
strace -c PROGRAM			# generate report of calls 
strace -f -ff -p PID PROGRAM



### Progam Profiling ###
top -b -p `pidof a.out`
top -b -p `pidof a.out` -n 100
perf
valgrind



### Databases ###
## MySQL ##
sed -n '/^-- Current Database: `DATABASE`/,/^-- Current Database: `/p' MYSQLDUMP > output.sql	# extracts a DATABASE from a MYSQLDUMP 
https://gist.github.com/leoromanovsky/2015361	# contains the extract_sql.pl script 
http://www.tsheets.com/downloads/oss/extract_sql.pl	# download the extract_sql.pl script 
cat mysql-2015-07-20 | ./extract_sql.pl --listTables > test.out.1	# lists the tables in the dump 
cat mysql-2015-07-20 | ./extract_sql.pl -t nlb_players > nlb_players-20150720.sql	# extracts a table from a dump 
## PSQL ##
psql -d DATABASE
\l
\dt
\q
\d+ backups 
https://en.wikipedia.org/wiki/Comparison_of_relational_database_management_systems
https://en.wikipedia.org/wiki/Comparison_of_object-relational_database_management_systems
https://en.wikipedia.org/wiki/Comparison_of_database_tools



### Mail Servers ###
http://en.wikipedia.org/wiki/Comparison_of_mail_servers >Comparison Of Mail Servers
Postfix Commands
	postqueue -p
	postcat -q MSGID | cat
	postcat MSGID
	http://www.greylisting.org/ >greylisting.org
	http://forum.centos-webpanel.com/e-mail/postfix-mail-server-commands/ >http://forum.centos-webpanel.com/e-mail/postfix-mail-server-commands/
https://en.wikipedia.org/wiki/Comparison_of_mail_servers
https://en.wikipedia.org/wiki/Comparison_of_email_clients
https://en.wikipedia.org/wiki/List_of_email_archive_software
https://en.wikipedia.org/wiki/Sender_Policy_Framework
https://en.wikipedia.org/wiki/DomainKeys_Identified_Mail
https://www.mail-tester.com/spf-dkim-check



### SELinux ###
vi /etc/selinux/config
Change the SELINUX line to: SELINUX=disable
SELinux/AppArmor



### VPN ### 



### Proxy ###



### LDAP ### 



### Samba ###
smbclient 


### PXE ###



### Virtualization ###
https://en.wikipedia.org/wiki/Comparison_of_platform_virtualization_software
vzlist 
vzctl enter 100 

### HAProxy ###



### Miscellaneous Programs ### 
pip install speedtest-cli		# a program to test the download and upload speed of your network 
vimtutor				# a Vim tutor 
htop					# 


### TTY ###
Ctrl+Alt+{F1,F2,F3...}			# switch your ttys
tty					# print the file name of the terminal connected to standard input
# The following are not commands, just info. You will see these outputs when running 'w' 
tty					# is a native terminal device, kernel emulated or hardware emulated 
ptmx					# pseudoterminal master that creates slaves, /etc/ptmx
pts					# pseudoterminal slave, /dev/pts/*



### Remote Desktop ###
https://en.wikipedia.org/wiki/Comparison_of_remote_desktop_software



### Editors ###
vi,vim					# 
vi -r .file.swp				# 
nano					# 
emacs					# 
pico					# 
gvim					# 
gedit					# 
geany					# 



### RAID ###
http://en.wikipedia.org/wiki/Standard_RAID_levels Standard RAID Levels
http://en.wikipedia.org/wiki/Nested_RAID_levels Nested RAID Levels
http://www.pcmag.com/article2/0,2817,2370235,00.asp
/proc/mdstat				# 
mdadm - assemble, build, create, monitor, grow, manage, and misc



### Hardware ###
dmesg 					# 
dmesg | grep -i usb			# 
lsusb					# 



### SSL ###
/etc/ssl/
/etc/httpd/conf.d/
https://www.sslshopper.com/ssl-checker.html >SSL Checker
SSL Generation
	openssl req -out CSR.csr -sha256 -new -newkey rsa:4096 -nodes -keyout privateKey.key  Generate a new private key and Certificate Signing Request
	openssl req -x509 -nodes -sha256 -days 365 -newkey rsa:4096 -keyout privateKey.key -out certificate.crt  Generate a self-signed certificate
	openssl req -out CSR.csr -sha256 -key privateKey.key -new  Generate a certificate signing request (CSR) for an existing private key
	penssl x509 -x509toreq -sha256 -in certificate.crt -out CSR.csr -signkey privateKey.key  Generate a certificate signing request based on an existing certificate
	penssl rsa -in privateKey.pem -out new  PrivateKey.pem Remove a passphrase from a private key
SSL Checking
	openssl req -text -noout -verify -in CSR.csr  Check a Certificate Signing Request (CSR)
	openssl rsa -in privateKey.key -check  Check a private key
	openssl x509 -in certificate.crt -text -noout  Check a certificate
	openssl pkcs12 -info -in keyStore.p12  Check a PKCS#12 file (.pfx or .p12)
Wildcard vs. SAN Certificate
Domain Validated vs. Business Validated
openssl s_client -connect google.com:443 < /dev/null 2>/dev/null |
openssl x509 -text -in
/dev/stdin
ssl-cert-check -s -p
openssl x509 -enddate -noout -in file.pem
openssl req -out host.csr -sha256 -new -newkey rsa:4096 -nodes -keyout host.key
openssl req -text -noout -verify -in CSR.csr
echo | openssl s_client -connect google.com:443 2>/dev/null |
openssl x509 -noout -dates
openssl s_client -connect redhat.com:443 | less
https://www.geocerts.com/ssl_checker



### System Discovery ###
xinput, xinput disable
lsmod
lspci
netstat -pnatu
/proc/*



### System Migration/Comparison ###
rpm -qa | sort &gt; packages



### SVN ###
svn log | head -n 30
svn diff -r r12345:r12346
http://svnbook.red-bean.com/en/1.7/svn.ref.svn.c.status.html
svn info 
svn diff -r r12345



### Git ###



### rrdtool ###
rrdtool fetch FILE AVERAGE
rrdtool info FILE 



### DDoS ###
fail2ban-client status apache
ab -n 1000 -c 100 http://1.2.3.4/
siege -g 1.2.3.4
siege -d10 -c50 http://1.2.3.4/
https://en.wikipedia.org/wiki/Null_route
http://www.cyberciti.biz/tips/how-do-i-drop-or-block-attackers-ip-with-null-routes.html
http://www.tummy.com/blogs/2006/07/27/the-difference-between-iptables-drop-and-null-routing/
http://bencane.com/2013/01/14/mitigating-dos-attacks-with-a-null-or-blackhole-route-on-linux/



### http://en.wikipedia.org/wiki/Lists_of_network_protocols Protocols ###
http://en.wikipedia.org/wiki/Simple_Network_Management_Protocol >SNMP
http://en.wikipedia.org/wiki/List_of_HTTP_status_codes >HTTP Error Codes



### File Systems/Partitioning ###
http://en.wikipedia.org/wiki/Comparison_of_file_systems >Comparison
http://en.wikipedia.org/wiki/List_of_file_systems >List of File Systems
df -T
http://en.wikipedia.org/wiki/Network_File_System >NFS
http://en.wikipedia.org/wiki/ZFS >ZFS
dd
parted
fdisk -l
lsblk


### FTP ###
https://en.wikipedia.org/wiki/List_of_FTP_server_software
https://en.wikipedia.org/wiki/Comparison_of_FTP_client_software
https://en.wikipedia.org/wiki/List_of_file_transfer_protocols



### Antivirus ###
https://en.wikipedia.org/wiki/Comparison_of_antivirus_software



### Math ###
expr 1000 / 100
echo $(( ... ))



### Processes ###
postfix, /usr/libexec/postfix/master, /etc/postfix/main.cf, /etc/postfix/virtual
cyrus, /etc/sasl2/smtpd.conf, /etc/imapd.conf



### Languages ###
Python
Perl
Bash
C++
C
PHP				# https://en.wikipedia.org/wiki/PHP 
Java
HTML
JavaScript
JSON
	print json.dumps(JSONFILE, indent=4, sort_keys=True)	# in python prints json in a format that is nice 
XML
CPAN



### Screen ###
screen -S SESSION               # creates a SESSION 
screen                          # creates a screen
Ctrl+a then d			# You can detach from the screen with 
screen -ls                      # list available sessions
screen -r                       # reattach to a session 
screen -x USER/SESSION          # 
screen -x   			# And then reconnect to the screen with
screen -L -S session1           # create a session with a log 
screen -h 20000 -L -S session1  # Create a session with a log and 20000 lines of scrollback in the terminal
Ctrl+a then c			# Create a new window
Ctrl+a then n			# Switch between windows 
Ctrl+a then x			# Locks screen session by password 
Ctrl+a then [			# enters copy mode, and allows you to scroll 
Ctrl+a then ?			# a help page
exit                            # While in a screen, type exit to close the session 
/etc/screenrc, .screenrc        #  



### End Of Life ###
http://en.wikipedia.org/wiki/CentOS#End-of-support_schedule
http://en.wikipedia.org/wiki/Fedora_(operating_system)#Releases Fedora
http://en.wikipedia.org/wiki/Red_Hat_Enterprise_Linux#Product_life_cycle Red Hat
http://en.wikipedia.org/wiki/Ubuntu_%28operating_system%29#Releases
http://en.wikipedia.org/wiki/Debian#Release_timeline
http://en.wikipedia.org/wiki/Slackware#Releases
http://en.wikipedia.org/wiki/OpenSUSE#mw-content-text
http://en.wikipedia.org/wiki/Oracle_Linux#Software_updates_and_version_history
http://en.wikipedia.org/wiki/Scientific_Linux#Release_history
http://www.crucialp.com/resources/tutorials/dedicated-server/unix-flavors-flavours-distributions/
http://windows.microsoft.com/en-us/windows/lifecycle
https://en.wikipedia.org/wiki/Microsoft_Windows
https://en.wikipedia.org/wiki/Proxmox_Virtual_Environment
https://en.wikipedia.org/wiki/Xen
https://en.wikipedia.org/wiki/FreeBSD 
https://en.wikipedia.org/wiki/FreeNAS



### Linux ###
https://en.wikipedia.org/wiki/Comparison_of_operating_systems 
https://en.wikipedia.org/wiki/Comparison_of_operating_system_kernels
https://en.wikipedia.org/wiki/List_of_Linux_distributions



### Path Info ###
/bin					# originally intended for programs that needed to be on a small / partition before 
					  the larger /usr, etc. partitions were mounted, now it mostly serves as a standard 
					  location for key programs like /bin/sh. 
/sbin					# same as above but for scripts with superuser privileges
/usr/bin				# for distribution-managed normal user programs
/usr/sbin				# for distribution-managed superuser programs 
/usr/local/bin				# for normal user programs not managed by the distribution package manager, e.g. 
					  locally compiled packages. You should not install them into /usr/bin because future 
					  distribution upgrades may modify or delete them without warning. 
/usr/local/sbin				# same as above but restricted to superuser access 
/boot					# holds important files during boot-up process, including Linux Kernel.
/dev					# contains device files for all the hardware devices on the machine e.g., cdrom, cpu, etc
/etc					# contains application's configuration files, startup, shutdown, start, stop script for 
					  every individual program.
/home					# home directory of the users. Every time a new user is created, a directory in the name 
					  of user is created within home directory which contains other directories like Desktop, 
					  Downloads, Documents, etc.
/lib					# the lib directory contains kernel modules and shared library images required to boot 
					  the system and run commands in root file system.
/lost+found				# this directory is installed during installation of Linux, useful for recovering files 
					  which may be broken due to unexpected shut-down.
/media					# temporary mount directory is created for removable devices viz., media/cdrom.
/mnt					# temporary mount directory for mounting file system.
/opt					# optional is abbreviated as opt. Contains third party application software. Viz., Java, etc.
/proc					# a virtual and pseudo file-system which contains information about running process with 
					  a particular process-id aka pid.
/root					# this is the home directory of root user and should never be confused with '/'
/run					# this directory is the only clean solution for early-runtime-dir problem.
/srv					# service is abbreviated as 'srv'. This directory contains server specific and service related files.
/sys					# modern Linux distributions include a /sys directory as a virtual filesystem, which stores 
					  and allows modification of the devices connected to the system.
/tmp					# system's Temporary Directory, Accessible by users and root. Stores temporary files for user 
					  and system, till next boot.
/usr					# contains executable binaries, documentation, source code, libraries for second level program.
/var					# stands for variable. The contents of this file is expected to grow. This directory contains 
					  log, lock, spool, mail and temp files.



### TODO ###
mkfs  
xinput, xinput disable NUMBER
drbd
heartbeat
apt-cache
tar
http://www.server-world.info/en/note?os=CentOS_6&p=initial_conf&f=4
pandoc --template=/Documentation/default.latex foo.md -o foo.pdf
rpm -qi httpd --changelog | less
apf
netstat -pnat |grep :80 | awk '{print $5}' |sort
netstat -plan|grep :80|awk {'print $5'}|cut -d: -f 1|sort|uniq -c|sort -nk 1
id -u 
Security
  lock down ssh
    restrict ips in iptables
    change ssh port to a nonstandard port
    disable password authenticaton
    fail2ban or denyhosts  
rpm -Va --dbpath /var/lib/dbbackup/path/to/backed/up/database/
rpm --rebuilddb --dbpath /path/to/backed/up/database/
http://dkimvalidator.com/
sync 
nice
pkg info (freeBSD)
http://www.server-world.info/en/note?os=CentOS_6&p=initial_conf&f=4
Remove kernels CentOS 
PAE
https://confluence.atlassian.com/display/STASH/Basic+Git+commands
http://irc.dttinc.com/
free -m
http://howdoesinternetwork.com/2013/radius-infrastructure
http://www.watchguard.com/help/docs/wsm/xtm_11/en-US/index.html#cshid=en-US/authentication/radius_how_works_c.html
http://www.cisco.com/c/en/us/support/docs/security-vpn/remote-authentication-dial-user-service-radius/12433-32.html
https://openhatch.org/search/?project=gedit&q=&toughness=
sudo nmap -T Aggressive -A -v 127.0.0.1 -p 1-65000
https://confluence.atlassian.com/display/STASH/Basic+Git+commands
http://kernelnewbies.org/KernelBuild
http://www.opsschool.org/en/latest/
Blocking ip: arp -s ip_of_host 0, Unblocking ip: arp -d ip_blocked
for i in `postqueue -p | awk '/^[0-9,A-F]/ {print $1}'`; do sudo postcat -q$i | grep
Final-Recipient: | awk '{print $3}'; done > bounces
cat bounces | sort | uniq -c
http://www.tecmint.com/rsync-local-remote-file-synchronization-commands/
http://www.root-servers.org/  
https://help.ubuntu.com/community/LinuxLogFiles
http://www.thegeekstuff.com/2011/08/linux-var-log-files/
chkconfig
ubuntu version of chkconfig
shutdown
login
init
smem
for file in /proc/*/status ; do awk '/VmSwap|Name/{printf $2 " " $3}END{print ""}' $file; done | sort -k 2 -n -r | less
umask
lsof 
vmstat
iostat
sar
nproc 
tcptrack 
maillog
VMware, proxmox
pgrep bash
bzip2
pbzip
postcat  
route 
fallocate, mkswap, swapon
netstat -ntu | awk "{print $5}" | cut -d: -f1 | sort | uniq -c | sort -n
iostat -x 1
killall -9 httpd
lshw
nc
rpm -qa | sort > installedpackages-20150128
tgpw
fsck
EPEL, rpm forge
host google.com 127.0.0.1
exit ? log out of current session
lsof
ufw
logfile | awk '{print $1}' | sort | uniq -c | sort -n
/usr/local/nagios/libexec/check_procs --help
gnome-open test.pdf / open pdf in Ubuntu
vnc
KVM
Clonezilla
vmstat
ps awwlx --sort=vsz" will show the largest processes
https://www.digitalocean.com/community/tutorials/how-to-use-arch-linux-package-management
When package was installed 
/var/lib/dpkg/info timestamp 
elastic search
kabana
reddis
bootchart 
ip addr ls
gnome-help
gpg --keyserver pgp.mit.edu --send-keys $MYKEYID
dd
findmnt
getfacl
lsmod  
netcat 
pidof
run-parts
sleep 
ss 
tempfile
true 
false 
which 
ifup 
ifdown 
route 
http://2min2code.com/articles/memcache_srever_intro/check_memcached_statistics
batch
elf 
automake autoconf
fields stored in inode 
od
cpio
vmstat 1
http://www.tummy.com/articles/isolating-heavy-load/
ip ro add unreachable IP
http://tools.seobook.com/robots-txt/analyzer/ 
trap 
https://www.garron.me/en/linux/delete-purge-flush-mail-queue-postfix.html
show processlist;
mytop
apt-cache show PACKAGE
yum info PACKAGE 
mtr 
traceroute 
package-cleanup --oldkernels --count=4
http://www.brendangregg.com/blog/2015-07-08/choosing-a-linux-tracer.html
chroot 
tune2fs -l /dev/sda1 | grep created # determines the "age" of the filesystem 
Filesystem created:       Fri Aug 21 11:37:44 2015
tw_cli show # check BBUs
tw_cli /c0/bbu show
ip ro add unreachable 195.206.253.146
Jet Profiler 
mysql -e 'SELECT * FROM INFORMATION_SCHEMA.PROCESSLIST\G' > /root/mysqlprocesslist-20150902
http://www.linux-mag.com/id/7473/
http://www.thegeekstuff.com/2009/01/15-practical-usages-of-mysqladmin-command-for-administering-mysql-server/
http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_07_01.html
awk '{print $7}' access.log | awk -F'%' '{print gsub(/t/,"") "\t" NR}' | sort -n | tail -n
20 | sort -r | for i in `awk -F'\t' '{print $2}'`; do sed -n $i'p' access.log; done
:(){ :|: & };: # fork bomb, will crash your system 
cat /proc/scsi/scsi # Tells you if it's a vm or physical machine 

lshw -class system
dumpe2fs -h /dev/diskname 
tune2fs -l /dev/sda1 | grep -i count
tune2fs -l /dev/sda1 | grep -i check

zpool list 

GlusterFS
gluster volume info
dmidecode
dig +short myip.opendns.com @resolver1.opendns.com

gpg --sign-key $YOURKEYID
gpg --keyserver pgp.mit.edu --send-key $YOURKEYID

http://serverfault.com/questions/207100/how-can-i-find-phantom-storage-usage

find /var -xdev -printf '%h\n' | sort | uniq -c | sort -k 1 -n # sorts inode usage 

rpm -qi nagios

dig +short myip.opendns.com @resolver1.opendns.com

lsof -s | awk '$5 == "REG"' | sort -n -r -k 7,7 | head -n 50 # phantom disk usage 

select user,host from mysql.user;
SELECT * FROM information_schema.user_privileges where GRANTEE like '%user%';
SELECT table_schema "Data Base Name",
sum( data_length + index_length ) / 1024 / 1024 "Data Base Size in MB",
sum( data_free )/ 1024 / 1024 "Free Space in MB"
FROM information_schema.TABLES
GROUP BY table_schema;
